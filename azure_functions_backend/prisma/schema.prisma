generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApplicationUser {
  id                    String               @id @default(uuid())
  username              String               @unique
  email                 String               @unique
  passwordHash          String
  avatar                String?
  firstName             String?
  lastName              String?
  dateOfBirth           DateTime?
  placeOfBirth          String?
  address               String?
  phone                 String?
  currentRole           String?
  department            String?
  fiscalCode            String?              @unique
  isAvailable           Boolean              @default(true)
  company               String?
  assets                Asset[]
  auditLogs             AuditLog[]           @relation("AuditLogUser")
  cvData                CVData?
  createdEvents         CalendarEvent[]      @relation("EventCreator")
  calendarEvents        CalendarEvent[]
  certifications        Certification[]
  comments              Comment[]
  uploadedDocuments     Document[]           @relation("DocumentUploader")
  userDocuments         Document[]           @relation("DocumentOwner")
  hardSkills            EmployeeSkill[]      @relation("HardSkills")
  softSkills            EmployeeSkill[]      @relation("SoftSkills")
  experiences           Experience[]
  menteeRelations       Mentorship[]         @relation("MenteeRelations")
  mentorRelations       Mentorship[]         @relation("MentorRelations")
  receivedNotifications Notification[]       @relation("NotificationRecipient")
  sentNotifications     Notification[]       @relation("NotificationSender")
  assignedObjectives    Objective[]          @relation("ObjectiveAssignee")
  employeeReviews       PerformanceReview[]  @relation("EmployeeReviews")
  reviewerReviews       PerformanceReview[]  @relation("ReviewerReviews")
  companyProjects       Project[]            @relation("ProjectCompany")
  projectAssignments    ProjectAssignment[]
  permissionGrants      RolePermission[]     @relation("PermissionGrant")
  assignedTasks         Task[]               @relation("TaskAssignee")
  createdTasks          Task[]               @relation("TaskCreator")
  trainingEnrollments   TrainingEnrollment[]
  activityLogs          UserActivityLog[]
  roleAssignments       UserRole[]           @relation("RoleAssignment")
  userRoles             UserRole[]
  userSettings          UserSetting?
}

model CVData {
  id                String           @id @default(uuid())
  fileName          String
  storageUrl        String
  uploadDate        DateTime
  parsedVersion     Int?
  applicationUserId String?          @unique
  applicationUser   ApplicationUser? @relation(fields: [applicationUserId], references: [id])
}

model Experience {
  id                String          @id @default(uuid())
  jobTitle          String
  companyName       String
  startDate         DateTime
  endDate           DateTime?
  description       String?
  technologiesUsed  String[]
  applicationUserId String
  applicationUser   ApplicationUser @relation(fields: [applicationUserId], references: [id])
}

model EmployeeSkill {
  id                    String           @id @default(uuid())
  name                  String
  proficiencyLevel      Int?
  lastUsed              DateTime?
  certification         String?
  applicationUserHardId String?
  applicationUserSoftId String?
  applicationUserHard   ApplicationUser? @relation("HardSkills", fields: [applicationUserHardId], references: [id])
  applicationUserSoft   ApplicationUser? @relation("SoftSkills", fields: [applicationUserSoftId], references: [id])
}

model Project {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  startDate          DateTime?
  endDate            DateTime?
  status             String
  managerId          String?
  budget             Float?
  priority           String?
  customerId         String?
  company            String?
  calendarEvents     CalendarEvent[]
  documents          Document[]
  objectives         Objective[]
  companyUser        ApplicationUser?    @relation("ProjectCompany", fields: [company], references: [id])
  customer           Customer?           @relation(fields: [customerId], references: [id])
  assignments        ProjectAssignment[]
  requiredHardSkills ProjectSkill[]      @relation("ProjectHardSkills")
  requiredSoftSkills ProjectSkill[]      @relation("ProjectSoftSkills")
  tasks              Task[]
}

model ProjectSkill {
  id                  String   @id @default(uuid())
  name                String
  minProficiencyLevel Int?
  proficiencyLevel    Int?
  certification       String?
  isMandatory         Boolean?
  projectHardId       String?
  projectSoftId       String?
  projectHard         Project? @relation("ProjectHardSkills", fields: [projectHardId], references: [id], onDelete: Cascade)
  projectSoft         Project? @relation("ProjectSoftSkills", fields: [projectSoftId], references: [id], onDelete: Cascade)
}

model ProjectAssignment {
  id                   String          @id @default(uuid())
  applicationUserId    String
  projectId            String
  roleOnProject        String
  assignmentStartDate  DateTime
  assignmentEndDate    DateTime?
  allocationPercentage Int
  status               String
  feedbackReceived     String?
  applicationUser      ApplicationUser @relation(fields: [applicationUserId], references: [id])
  project              Project         @relation(fields: [projectId], references: [id])
}

model SkillTraining {
  id                     String               @id @default(uuid())
  title                  String
  description            String?
  provider               String?
  url                    String?
  estimatedDurationHours Int
  skillsDeveloped        String[]
  level                  String?
  cost                   Float?
  company                String?
  enrollments            TrainingEnrollment[]
}

model Asset {
  id                Int              @id @default(autoincrement())
  name              String
  type              String
  enable            Boolean          @default(true)
  applicationUserId String?
  applicationUser   ApplicationUser? @relation(fields: [applicationUserId], references: [id], onDelete: Cascade)
}

model UserActivityLog {
  id           String          @id @default(uuid())
  userId       String
  action       String
  entityType   String
  entityId     String?
  description  String
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime        @default(now())
  status       String
  errorMessage String?
  metadata     Json?
  user         ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  senderId    String?
  type        String
  title       String
  message     String
  priority    String           @default("MEDIUM")
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  expiresAt   DateTime?
  actionUrl   String?
  metadata    Json?
  recipient   ApplicationUser  @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      ApplicationUser? @relation("NotificationSender", fields: [senderId], references: [id])
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  resource        String
  action          String
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  rolePermissions RolePermission[]
}

model UserRole {
  id             String           @id @default(uuid())
  userId         String
  roleId         String
  assignedBy     String?
  assignedAt     DateTime         @default(now())
  expiresAt      DateTime?
  isActive       Boolean          @default(true)
  assignedByUser ApplicationUser? @relation("RoleAssignment", fields: [assignedBy], references: [id])
  role           Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user           ApplicationUser  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id            String           @id @default(uuid())
  roleId        String
  permissionId  String
  grantedAt     DateTime         @default(now())
  grantedBy     String?
  isActive      Boolean          @default(true)
  grantedByUser ApplicationUser? @relation("PermissionGrant", fields: [grantedBy], references: [id])
  permission    Permission       @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role          Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Customer {
  id             String          @id @default(uuid())
  name           String
  companyName    String?
  email          String?
  phone          String?
  address        String?
  city           String?
  country        String?
  vatNumber      String?
  fiscalCode     String?
  contactPerson  String?
  contactPhone   String?
  contactEmail   String?
  notes          String?
  status         String          @default("ACTIVE")
  industry       String?
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  company        String?
  calendarEvents CalendarEvent[]
  projects       Project[]
}

model CalendarEvent {
  id                String           @id @default(uuid())
  title             String
  description       String?
  startDate         DateTime
  endDate           DateTime
  allDay            Boolean          @default(false)
  eventType         String
  status            String           @default("CONFIRMED")
  priority          String           @default("MEDIUM")
  location          String?
  attendees         String[]
  createdBy         String
  customerId        String?
  projectId         String?
  userId            String?
  color             String?
  recurrence        String?
  recurrenceEndDate DateTime?
  isPrivate         Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdByUser     ApplicationUser  @relation("EventCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  customer          Customer?        @relation(fields: [customerId], references: [id])
  project           Project?         @relation(fields: [projectId], references: [id])
  user              ApplicationUser? @relation(fields: [userId], references: [id])
}

model PerformanceReview {
  id                  String          @id @default(uuid())
  employeeId          String
  reviewerId          String
  reviewPeriod        String
  reviewDate          DateTime        @default(now())
  overallScore        Float?
  technicalScore      Float?
  softSkillScore      Float?
  leadershipScore     Float?
  feedback            String?
  strengths           String[]
  areasForImprovement String[]
  goals               String?
  status              String          @default("DRAFT")
  nextReviewDate      DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  employee            ApplicationUser @relation("EmployeeReviews", fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer            ApplicationUser @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model TrainingEnrollment {
  id             String          @id @default(uuid())
  userId         String
  trainingId     String
  enrollmentDate DateTime        @default(now())
  status         String          @default("PLANNED")
  completionDate DateTime?
  score          Float?
  certificateUrl String?
  notes          String?
  progress       Int?
  company        String?
  training       SkillTraining   @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user           ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trainingId])
}

model Certification {
  id                String          @id @default(uuid())
  userId            String
  name              String
  issuingAuthority  String
  certificateNumber String?
  issueDate         DateTime
  expiryDate        DateTime?
  status            String          @default("ACTIVE")
  credentialUrl     String?
  description       String?
  tags              String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id             String           @id @default(uuid())
  title          String
  description    String?
  assignedTo     String?
  projectId      String?
  priority       String           @default("MEDIUM")
  status         String           @default("TODO")
  dueDate        DateTime?
  startDate      DateTime?
  completedDate  DateTime?
  estimatedHours Float?
  actualHours    Float?
  tags           String[]
  attachments    String[]
  createdBy      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assignedUser   ApplicationUser? @relation("TaskAssignee", fields: [assignedTo], references: [id])
  createdByUser  ApplicationUser  @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  project        Project?         @relation(fields: [projectId], references: [id])
}

model Mentorship {
  id               String          @id @default(uuid())
  mentorId         String
  menteeId         String
  startDate        DateTime        @default(now())
  endDate          DateTime?
  status           String          @default("ACTIVE")
  goals            String?
  notes            String?
  meetingFrequency String?
  lastMeetingDate  DateTime?
  nextMeetingDate  DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  mentee           ApplicationUser @relation("MenteeRelations", fields: [menteeId], references: [id], onDelete: Cascade)
  mentor           ApplicationUser @relation("MentorRelations", fields: [mentorId], references: [id], onDelete: Cascade)

  @@unique([mentorId, menteeId])
}

model Comment {
  id              String          @id @default(uuid())
  content         String
  entityType      String
  entityId        String
  authorId        String
  parentCommentId String?
  isPrivate       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  author          ApplicationUser @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment   Comment?        @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[]       @relation("CommentReplies")
}

model Objective {
  id           String           @id @default(uuid())
  title        String
  description  String?
  targetValue  Float?
  currentValue Float?
  unit         String?
  startDate    DateTime
  endDate      DateTime
  status       String           @default("ACTIVE")
  priority     String           @default("MEDIUM")
  assignedTo   String?
  projectId    String?
  category     String?
  progress     Int?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  assignedUser ApplicationUser? @relation("ObjectiveAssignee", fields: [assignedTo], references: [id])
  project      Project?         @relation(fields: [projectId], references: [id])
}

model Document {
  id               String           @id @default(uuid())
  fileName         String
  originalFileName String
  fileUrl          String
  fileSize         Int
  mimeType         String
  uploadedBy       String
  userId           String?
  projectId        String?
  category         String?
  tags             String[]
  isPublic         Boolean          @default(false)
  description      String?
  uploadedAt       DateTime         @default(now())
  project          Project?         @relation(fields: [projectId], references: [id])
  uploadedByUser   ApplicationUser  @relation("DocumentUploader", fields: [uploadedBy], references: [id], onDelete: Cascade)
  user             ApplicationUser? @relation("DocumentOwner", fields: [userId], references: [id])
}

model AuditLog {
  id          String           @id @default(uuid())
  userId      String?
  action      String
  entityType  String
  entityId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  description String?
  severity    String           @default("INFO")
  timestamp   DateTime         @default(now())
  user        ApplicationUser? @relation("AuditLogUser", fields: [userId], references: [id])
}

model UserSetting {
  id                      String          @id @default(uuid())
  userId                  String          @unique
  theme                   String          @default("LIGHT")
  language                String          @default("IT")
  timezone                String          @default("Europe/Rome")
  dateFormat              String          @default("DD/MM/YYYY")
  timeFormat              String          @default("24H")
  notificationPreferences Json?
  dashboardLayout         Json?
  emailNotifications      Boolean         @default(true)
  pushNotifications       Boolean         @default(true)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  user                    ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}
