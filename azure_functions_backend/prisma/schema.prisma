generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApplicationUser {
  id                 String              @id @default(uuid())
  username           String              @unique
  email              String              @unique
  passwordHash       String
  avatar             String?
  firstName          String?
  lastName           String?
  dateOfBirth        DateTime?
  placeOfBirth       String?
  address            String?
  phone              String?
  currentRole        String?
  department         String?
  isAvailable        Boolean             @default(true)
  cvData             CVData?
  hardSkills         EmployeeSkill[]     @relation("HardSkills")
  softSkills         EmployeeSkill[]     @relation("SoftSkills")
  experiences        Experience[]
  projectAssignments ProjectAssignment[]
  activityLogs       UserActivityLog[]
  sentNotifications  Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationRecipient")
  
  // Nuove relazioni per il sistema di ruoli e permessi
  userRoles          UserRole[]
  roleAssignments    UserRole[] @relation("RoleAssignment")
  permissionGrants   RolePermission[] @relation("PermissionGrant")
}

model CVData {
  id                String           @id @default(uuid())
  fileName          String
  storageUrl        String
  uploadDate        DateTime
  parsedVersion     Int?
  applicationUserId String?          @unique
  applicationUser   ApplicationUser? @relation(fields: [applicationUserId], references: [id])
}

model Experience {
  id                String          @id @default(uuid())
  jobTitle          String
  companyName       String
  startDate         DateTime
  endDate           DateTime?
  description       String?
  technologiesUsed  String[]
  applicationUserId String
  applicationUser   ApplicationUser @relation(fields: [applicationUserId], references: [id])
}

model EmployeeSkill {
  id                    String           @id @default(uuid())
  name                  String
  proficiencyLevel      Int?
  lastUsed              DateTime?
  certification         String?
  applicationUserHardId String?
  applicationUserSoftId String?
  applicationUserHard   ApplicationUser? @relation("HardSkills", fields: [applicationUserHardId], references: [id])
  applicationUserSoft   ApplicationUser? @relation("SoftSkills", fields: [applicationUserSoftId], references: [id])
}

model Project {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  startDate          DateTime?
  endDate            DateTime?
  status             String
  managerId          String?
  budget             Float?
  priority           String?
  assignments        ProjectAssignment[]
  requiredHardSkills ProjectSkill[]      @relation("ProjectHardSkills")
  requiredSoftSkills ProjectSkill[]      @relation("ProjectSoftSkills")
}

model ProjectSkill {
  id                  String   @id @default(uuid())
  name                String
  minProficiencyLevel Int?
  proficiencyLevel    Int? // For soft skills (like EmployeeSkill)
  certification       String? // For both hard and soft skills
  isMandatory         Boolean?
  projectHardId       String?
  projectSoftId       String?
  projectHard         Project? @relation("ProjectHardSkills", fields: [projectHardId], references: [id], onDelete: Cascade)
  projectSoft         Project? @relation("ProjectSoftSkills", fields: [projectSoftId], references: [id], onDelete: Cascade)
}

model ProjectAssignment {
  id                   String          @id @default(uuid())
  applicationUserId    String
  projectId            String
  roleOnProject        String
  assignmentStartDate  DateTime
  assignmentEndDate    DateTime?
  allocationPercentage Int
  status               String
  feedbackReceived     String?
  applicationUser      ApplicationUser @relation(fields: [applicationUserId], references: [id])
  project              Project         @relation(fields: [projectId], references: [id])
}

model SkillTraining {
  id                     String   @id @default(uuid())
  title                  String
  description            String?
  provider               String?
  url                    String?
  estimatedDurationHours Int
  skillsDeveloped        String[]
  level                  String?
  cost                   Float?
}

model Asset {
  id     Int     @id @default(autoincrement())
  name   String
  type   String
  enable Boolean @default(true)
}

model UserActivityLog {
  id          String    @id @default(uuid())
  userId      String
  action      String
  entityType  String
  entityId    String?
  description String
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  status      String
  errorMessage String?
  metadata    Json?
  
  user        ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String
  senderId    String?
  type        String
  title       String
  message     String
  priority    String    @default("MEDIUM")
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  actionUrl   String?
  metadata    Json?
  
  recipient   ApplicationUser @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      ApplicationUser? @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
}

// Sistema di Ruoli e Permessi Granulari
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazioni
  userRoles   UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  resource    String   // es. "users", "projects", "tasks"
  action      String   // es. "create", "read", "update", "delete"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relazioni
  rolePermissions RolePermission[]
}

model UserRole {
  id                String          @id @default(uuid())
  userId            String
  roleId            String
  assignedBy        String?
  assignedAt        DateTime        @default(now())
  expiresAt         DateTime?
  isActive          Boolean         @default(true)
  
  // Relazioni
  user              ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  role              Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser    ApplicationUser? @relation("RoleAssignment", fields: [assignedBy], references: [id], onDelete: SetNull)
  
  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?
  isActive     Boolean    @default(true)
  
  // Relazioni
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedByUser ApplicationUser? @relation("PermissionGrant", fields: [grantedBy], references: [id], onDelete: SetNull)
  
  @@unique([roleId, permissionId])
} 