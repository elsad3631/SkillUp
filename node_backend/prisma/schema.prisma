// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApplicationUser {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  roles        String[]
  employee     Employee? @relation(fields: [employeeId], references: [id])
  employeeId   String?  @unique // chiave esterna opzionale e unica verso Employee
}

model Employee {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  placeOfBirth String?
  address      String?
  phone        String?
  email        String   @unique
  cvData       CVData?
  experiences  Experience[]
  hardSkills   EmployeeSkill[] @relation("HardSkills")
  softSkills   EmployeeSkill[] @relation("SoftSkills")
  currentRole  String?
  department   String?
  isAvailable  Boolean  @default(true)
  user         ApplicationUser?
  projectAssignments ProjectAssignment[]
}

model CVData {
  id         String   @id @default(uuid())
  fileName   String
  storageUrl String
  uploadDate DateTime
  parsedVersion Int?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String? @unique
}

model Experience {
  id              String   @id @default(uuid())
  jobTitle        String
  companyName     String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  technologiesUsed String[]
  employee        Employee @relation(fields: [employeeId], references: [id])
  employeeId      String
}

model EmployeeSkill {
  id               String   @id @default(uuid())
  name             String
  proficiencyLevel Int?
  lastUsed         DateTime?
  certification    String?
  employeeHard     Employee? @relation("HardSkills", fields: [employeeHardId], references: [id])
  employeeHardId   String?
  employeeSoft     Employee? @relation("SoftSkills", fields: [employeeSoftId], references: [id])
  employeeSoftId   String?
}

model Project {
  id                String   @id @default(uuid())
  name              String
  description       String?
  requiredHardSkills SkillRequirement[]
  requiredSoftSkills String[]
  startDate         DateTime?
  endDate           DateTime?
  status            String
  managerId         String?
  budget            Float?
  priority          String?
  assignments       ProjectAssignment[]
}

model SkillRequirement {
  id                 String   @id @default(uuid())
  name               String
  minProficiencyLevel Int
  isMandatory        Boolean
  project            Project? @relation(fields: [projectId], references: [id])
  projectId          String?
}

model ProjectAssignment {
  id                  String   @id @default(uuid())
  employee            Employee @relation(fields: [employeeId], references: [id])
  employeeId          String
  project             Project  @relation(fields: [projectId], references: [id])
  projectId           String
  roleOnProject       String
  assignmentStartDate DateTime
  assignmentEndDate   DateTime?
  allocationPercentage Int
  status              String
  feedbackReceived    String?
}

model SkillTraining {
  id                  String   @id @default(uuid())
  title               String
  description         String?
  provider            String?
  url                 String?
  estimatedDurationHours Int
  skillsDeveloped     String[]
  level               String?
  cost                Float?
}

model Asset {
  id     Int     @id @default(autoincrement())
  name   String
  type   String
  enable Boolean @default(true)
}
